from web3 import Web3
from time import time

web3 = Web3(Web3.HTTPProvider("http://127.0.0.1:8545")) 

if not web3.is_connected():
    print("Web3 connection failed!")
else:
    print("Web3 is connected.")

contract_address = "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9"

import json
contract_abi = json.loads(open("./artifacts/contracts/vuln.sol/Vuln.json", "r").read())["abi"]

contract = web3.eth.contract(address=contract_address, abi=contract_abi)
private_key = "0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d"

account = web3.eth.account.from_key(private_key)
sender_address = account.address

def transfer_money():
    tx = contract.functions.transfer_money().build_transaction({
        "from": sender_address,
        "gas": 200000,
        "gasPrice": web3.eth.gas_price,
        "nonce": web3.eth.get_transaction_count(sender_address),
    })

    signed_tx = web3.eth.account.sign_transaction(tx, private_key)

    tx_hash = web3.eth.send_raw_transaction(signed_tx.raw_transaction)

    receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
    
    return receipt

def fail():
    tx = contract.functions.fail().build_transaction({
        "from": sender_address,
        "gas": 200000,
        "gasPrice": web3.eth.gas_price,
        "nonce": web3.eth.get_transaction_count(sender_address),
    })

    signed_tx = web3.eth.account.sign_transaction(tx, private_key)

    tx_hash = web3.eth.send_raw_transaction(signed_tx.raw_transaction)

    receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
    
    return receipt


for i in range(10):
    if i % 2 == 0:
        transfer_money()
    else:
        fail()

for i in range(100):
    fail()



